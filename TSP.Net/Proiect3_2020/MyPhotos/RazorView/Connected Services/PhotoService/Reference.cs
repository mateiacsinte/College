//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PhotoService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhotoDTO", Namespace="http://schemas.datacontract.org/2004/07/ObjectWCF")]
    public partial class PhotoDTO : object
    {
        
        private string DateField;
        
        private string LocationListField;
        
        private string NameField;
        
        private string PathField;
        
        private string PeopleListField;
        
        private string TagListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationList
        {
            get
            {
                return this.LocationListField;
            }
            set
            {
                this.LocationListField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PeopleList
        {
            get
            {
                return this.PeopleListField;
            }
            set
            {
                this.PeopleListField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagList
        {
            get
            {
                return this.TagListField;
            }
            set
            {
                this.TagListField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhotoService.IPhotoService")]
    public interface IPhotoService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/AddPhoto", ReplyAction="http://tempuri.org/IPhotoService/AddPhotoResponse")]
        System.Threading.Tasks.Task AddPhotoAsync(string photoName, string photoPath, string photoLocations, string photoTags, string photoDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/UpdatePhoto", ReplyAction="http://tempuri.org/IPhotoService/UpdatePhotoResponse")]
        System.Threading.Tasks.Task UpdatePhotoAsync(string name, string newName, string newPath, string newLocation, string newTags, string newDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/DeletePhotos", ReplyAction="http://tempuri.org/IPhotoService/DeletePhotosResponse")]
        System.Threading.Tasks.Task DeletePhotosAsync(string photoName, string photoLocation, string photoTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/AddLocations", ReplyAction="http://tempuri.org/IPhotoService/AddLocationsResponse")]
        System.Threading.Tasks.Task AddLocationsAsync(string photoName, string locationsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/AddTags", ReplyAction="http://tempuri.org/IPhotoService/AddTagsResponse")]
        System.Threading.Tasks.Task AddTagsAsync(string photoName, string tagList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/AddPerson", ReplyAction="http://tempuri.org/IPhotoService/AddPersonResponse")]
        System.Threading.Tasks.Task AddPersonAsync(string firstName, string lastName, string photos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/FilterPhotos", ReplyAction="http://tempuri.org/IPhotoService/FilterPhotosResponse")]
        System.Threading.Tasks.Task<PhotoService.PhotoDTO[]> FilterPhotosAsync(string photoName, string person, string path, string location, string tag, string date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IPhotoServiceChannel : PhotoService.IPhotoService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class PhotoServiceClient : System.ServiceModel.ClientBase<PhotoService.IPhotoService>, PhotoService.IPhotoService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PhotoServiceClient() : 
                base(PhotoServiceClient.GetDefaultBinding(), PhotoServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPhotoService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotoServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(PhotoServiceClient.GetBindingForEndpoint(endpointConfiguration), PhotoServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotoServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PhotoServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotoServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PhotoServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task AddPhotoAsync(string photoName, string photoPath, string photoLocations, string photoTags, string photoDate)
        {
            return base.Channel.AddPhotoAsync(photoName, photoPath, photoLocations, photoTags, photoDate);
        }
        
        public System.Threading.Tasks.Task UpdatePhotoAsync(string name, string newName, string newPath, string newLocation, string newTags, string newDate)
        {
            return base.Channel.UpdatePhotoAsync(name, newName, newPath, newLocation, newTags, newDate);
        }
        
        public System.Threading.Tasks.Task DeletePhotosAsync(string photoName, string photoLocation, string photoTag)
        {
            return base.Channel.DeletePhotosAsync(photoName, photoLocation, photoTag);
        }
        
        public System.Threading.Tasks.Task AddLocationsAsync(string photoName, string locationsList)
        {
            return base.Channel.AddLocationsAsync(photoName, locationsList);
        }
        
        public System.Threading.Tasks.Task AddTagsAsync(string photoName, string tagList)
        {
            return base.Channel.AddTagsAsync(photoName, tagList);
        }
        
        public System.Threading.Tasks.Task AddPersonAsync(string firstName, string lastName, string photos)
        {
            return base.Channel.AddPersonAsync(firstName, lastName, photos);
        }
        
        public System.Threading.Tasks.Task<PhotoService.PhotoDTO[]> FilterPhotosAsync(string photoName, string person, string path, string location, string tag, string date)
        {
            return base.Channel.FilterPhotosAsync(photoName, person, path, location, tag, date);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPhotoService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPhotoService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:3005/photoAPI");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PhotoServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPhotoService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PhotoServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPhotoService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPhotoService,
        }
    }
}
