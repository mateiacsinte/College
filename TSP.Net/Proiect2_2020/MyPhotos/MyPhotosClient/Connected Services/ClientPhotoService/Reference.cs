//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyPhotosClient.ClientPhotoService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photo", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos.Context")]
    [System.SerializableAttribute()]
    public partial class Photo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotosClient.ClientPhotoService.Location[] LocationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotosClient.ClientPhotoService.Person[] PeopleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PhotoIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotosClient.ClientPhotoService.Tags[] TagsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotosClient.ClientPhotoService.Location[] Locations {
            get {
                return this.LocationsField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationsField, value) != true)) {
                    this.LocationsField = value;
                    this.RaisePropertyChanged("Locations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotosClient.ClientPhotoService.Person[] People {
            get {
                return this.PeopleField;
            }
            set {
                if ((object.ReferenceEquals(this.PeopleField, value) != true)) {
                    this.PeopleField = value;
                    this.RaisePropertyChanged("People");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PhotoId {
            get {
                return this.PhotoIdField;
            }
            set {
                if ((this.PhotoIdField.Equals(value) != true)) {
                    this.PhotoIdField = value;
                    this.RaisePropertyChanged("PhotoId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotosClient.ClientPhotoService.Tags[] Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos.Context")]
    [System.SerializableAttribute()]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LocationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotosClient.ClientPhotoService.Photo[] PhotosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocationId {
            get {
                return this.LocationIdField;
            }
            set {
                if ((this.LocationIdField.Equals(value) != true)) {
                    this.LocationIdField = value;
                    this.RaisePropertyChanged("LocationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotosClient.ClientPhotoService.Photo[] Photos {
            get {
                return this.PhotosField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotosField, value) != true)) {
                    this.PhotosField = value;
                    this.RaisePropertyChanged("Photos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos.Context")]
    [System.SerializableAttribute()]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotosClient.ClientPhotoService.Photo[] PhotosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonId {
            get {
                return this.PersonIdField;
            }
            set {
                if ((this.PersonIdField.Equals(value) != true)) {
                    this.PersonIdField = value;
                    this.RaisePropertyChanged("PersonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotosClient.ClientPhotoService.Photo[] Photos {
            get {
                return this.PhotosField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotosField, value) != true)) {
                    this.PhotosField = value;
                    this.RaisePropertyChanged("Photos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tags", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos.Context")]
    [System.SerializableAttribute()]
    public partial class Tags : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotosClient.ClientPhotoService.Photo[] PhotosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TagIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotosClient.ClientPhotoService.Photo[] Photos {
            get {
                return this.PhotosField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotosField, value) != true)) {
                    this.PhotosField = value;
                    this.RaisePropertyChanged("Photos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TagId {
            get {
                return this.TagIdField;
            }
            set {
                if ((this.TagIdField.Equals(value) != true)) {
                    this.TagIdField = value;
                    this.RaisePropertyChanged("TagId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientPhotoService.IPhotoService")]
    public interface IPhotoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/AddPhoto", ReplyAction="http://tempuri.org/IPhotoService/AddPhotoResponse")]
        void AddPhoto(string photoName, string photoPath, string photoLocations, string photoTags, string photoDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/AddPhoto", ReplyAction="http://tempuri.org/IPhotoService/AddPhotoResponse")]
        System.Threading.Tasks.Task AddPhotoAsync(string photoName, string photoPath, string photoLocations, string photoTags, string photoDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/UpdatePhoto", ReplyAction="http://tempuri.org/IPhotoService/UpdatePhotoResponse")]
        void UpdatePhoto(string name, string newName, string newPath, string newLocation, string newTags, string newDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/UpdatePhoto", ReplyAction="http://tempuri.org/IPhotoService/UpdatePhotoResponse")]
        System.Threading.Tasks.Task UpdatePhotoAsync(string name, string newName, string newPath, string newLocation, string newTags, string newDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/DeletePhotos", ReplyAction="http://tempuri.org/IPhotoService/DeletePhotosResponse")]
        void DeletePhotos(string photoName, string photoLocation, string photoTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/DeletePhotos", ReplyAction="http://tempuri.org/IPhotoService/DeletePhotosResponse")]
        System.Threading.Tasks.Task DeletePhotosAsync(string photoName, string photoLocation, string photoTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/AddLocations", ReplyAction="http://tempuri.org/IPhotoService/AddLocationsResponse")]
        void AddLocations(string photoName, string locationsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/AddLocations", ReplyAction="http://tempuri.org/IPhotoService/AddLocationsResponse")]
        System.Threading.Tasks.Task AddLocationsAsync(string photoName, string locationsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/AddTags", ReplyAction="http://tempuri.org/IPhotoService/AddTagsResponse")]
        void AddTags(string photoName, string tagList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/AddTags", ReplyAction="http://tempuri.org/IPhotoService/AddTagsResponse")]
        System.Threading.Tasks.Task AddTagsAsync(string photoName, string tagList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/AddPerson", ReplyAction="http://tempuri.org/IPhotoService/AddPersonResponse")]
        void AddPerson(string firstName, string lastName, string photos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/AddPerson", ReplyAction="http://tempuri.org/IPhotoService/AddPersonResponse")]
        System.Threading.Tasks.Task AddPersonAsync(string firstName, string lastName, string photos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/FilterPhotos", ReplyAction="http://tempuri.org/IPhotoService/FilterPhotosResponse")]
        MyPhotosClient.ClientPhotoService.Photo[] FilterPhotos(string photoName, string person, string path, string location, string tag, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/FilterPhotos", ReplyAction="http://tempuri.org/IPhotoService/FilterPhotosResponse")]
        System.Threading.Tasks.Task<MyPhotosClient.ClientPhotoService.Photo[]> FilterPhotosAsync(string photoName, string person, string path, string location, string tag, string date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhotoServiceChannel : MyPhotosClient.ClientPhotoService.IPhotoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhotoServiceClient : System.ServiceModel.ClientBase<MyPhotosClient.ClientPhotoService.IPhotoService>, MyPhotosClient.ClientPhotoService.IPhotoService {
        
        public PhotoServiceClient() {
        }
        
        public PhotoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhotoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddPhoto(string photoName, string photoPath, string photoLocations, string photoTags, string photoDate) {
            base.Channel.AddPhoto(photoName, photoPath, photoLocations, photoTags, photoDate);
        }
        
        public System.Threading.Tasks.Task AddPhotoAsync(string photoName, string photoPath, string photoLocations, string photoTags, string photoDate) {
            return base.Channel.AddPhotoAsync(photoName, photoPath, photoLocations, photoTags, photoDate);
        }
        
        public void UpdatePhoto(string name, string newName, string newPath, string newLocation, string newTags, string newDate) {
            base.Channel.UpdatePhoto(name, newName, newPath, newLocation, newTags, newDate);
        }
        
        public System.Threading.Tasks.Task UpdatePhotoAsync(string name, string newName, string newPath, string newLocation, string newTags, string newDate) {
            return base.Channel.UpdatePhotoAsync(name, newName, newPath, newLocation, newTags, newDate);
        }
        
        public void DeletePhotos(string photoName, string photoLocation, string photoTag) {
            base.Channel.DeletePhotos(photoName, photoLocation, photoTag);
        }
        
        public System.Threading.Tasks.Task DeletePhotosAsync(string photoName, string photoLocation, string photoTag) {
            return base.Channel.DeletePhotosAsync(photoName, photoLocation, photoTag);
        }
        
        public void AddLocations(string photoName, string locationsList) {
            base.Channel.AddLocations(photoName, locationsList);
        }
        
        public System.Threading.Tasks.Task AddLocationsAsync(string photoName, string locationsList) {
            return base.Channel.AddLocationsAsync(photoName, locationsList);
        }
        
        public void AddTags(string photoName, string tagList) {
            base.Channel.AddTags(photoName, tagList);
        }
        
        public System.Threading.Tasks.Task AddTagsAsync(string photoName, string tagList) {
            return base.Channel.AddTagsAsync(photoName, tagList);
        }
        
        public void AddPerson(string firstName, string lastName, string photos) {
            base.Channel.AddPerson(firstName, lastName, photos);
        }
        
        public System.Threading.Tasks.Task AddPersonAsync(string firstName, string lastName, string photos) {
            return base.Channel.AddPersonAsync(firstName, lastName, photos);
        }
        
        public MyPhotosClient.ClientPhotoService.Photo[] FilterPhotos(string photoName, string person, string path, string location, string tag, string date) {
            return base.Channel.FilterPhotos(photoName, person, path, location, tag, date);
        }
        
        public System.Threading.Tasks.Task<MyPhotosClient.ClientPhotoService.Photo[]> FilterPhotosAsync(string photoName, string person, string path, string location, string tag, string date) {
            return base.Channel.FilterPhotosAsync(photoName, person, path, location, tag, date);
        }
    }
}
